apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose --file docker-compose.yml convert
    kompose.version: 1.21.0 ()
  labels:
    io.kompose.service: mystok-app
  name: mystok-app
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mystok-app
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose --file docker-compose.yml convert
        kompose.version: 1.21.0 ()
      labels:
        io.kompose.service: mystok-app
    spec:
      containers:
      - image: dekabitasp/mystok-db-test-cloudsql:v1 
        imagePullPolicy: ""
        name: mystok-app
        ports:
        - containerPort: 80
        resources: {}
#        volumeMounts:
#        - mountPath: /usr/local/tomcat/webapps/
#          name: mystok-app-claim0
#        - mountPath: /usr/local/tomcat/webapps/mystok/WEB-INF/lib
#          name: mystok-app-claim1
      - name: cloud-sql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.17
        command:
          - "/cloud_sql_proxy"
          - "-instances=my-kubernetes-test-20200822:us-central1:mystok-cloudsql=tcp:3306"
          - "-credential_file=/secrets/service_account.json"
        securityContext:
          runAsNonRoot: true
        volumeMounts:
        - name: gcp-sa-mystok-secret-volume
          mountPath: /secrets/
          readOnly: true
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: gcp-sa-mystok-secret-volume
        secret:
          secretName: gcp-sa-mystok-secret
#      volumes:
#      - name: mystok-app-claim0
#        persistentVolumeClaim:
#          claimName: mystok-app-claim0
#      - name: mystok-app-claim1
#        persistentVolumeClaim:
#          claimName: mystok-app-claim1
